import os
import asyncio
import logging
import tempfile
import aiohttp

import yt_dlp
import spotipy

from telethon import types
from telethon.tl.functions.channels import EditTitleRequest
from telethon.tl.functions.account import UpdateProfileRequest

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class Spotify4ik(loader.Module):
    """–°–ª—É—à–∞–π –º—É–∑—ã–∫—É –≤ Spotify"""

    strings = {
        "name": "Spotify4ik",

        "go_auth_link": """<b><emoji document_id=5271604874419647061>üîó</emoji> –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞!
        
üîê –ü–µ—Ä–µ–π–¥–∏ –ø–æ <a href='{}'>—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a>.
        
‚úèÔ∏è –ü–æ—Ç–æ–º –≤–≤–µ–¥–∏: <code>{}spcode —Å–≤–æ–π_auth_token</code></b>""",

        "need_client_tokens": """<emoji document_id=5472308992514464048>üîê</emoji> <b>–°–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ <a href="https://developer.spotify.com/dashboard">—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a></b>

<emoji document_id=5467890025217661107>‚ÄºÔ∏è</emoji> <b>–í–∞–∂–Ω–æ:</b> redirect_url –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <code>https://sp.fajox.one</code>
        
<b><emoji document_id=5330115548900501467>üîë</emoji> –ó–∞–ø–æ–ª–Ω–∏ <code>client_id</code> –∏ <code>client_secret</code> –≤ <code>{}cfg Spotify4ik</code></b>

<b><emoji document_id=5431376038628171216>üíª</emoji> –ò —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏ <code>{}spauth</code></b>""",

        "no_auth_token": "<emoji document_id=5854929766146118183>‚ùå</emoji> <b>–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ <code>{}spauth</code></b>",
        "no_song_playing": "<emoji document_id=5854929766146118183>‚ùå</emoji> <b>–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.</b>",
        "no_code": "<emoji document_id=5854929766146118183>‚ùå</emoji> <b>–î–æ–ª–∂–Ω–æ –±—ã—Ç—å <code>{}spcode –∫–æ–¥_–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</code></b>",
        "code_installed": """<b><emoji document_id=5330115548900501467>üîë</emoji> –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>
        
<emoji document_id=5870794890006237381>üé∂</emoji> <b>–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º—É–∑—ã–∫–æ–π!</b>""",

        "auth_error": "<emoji document_id=5854929766146118183>‚ùå</emoji> <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b> <code>{}</code>",
        "unexpected_error": "<emoji document_id=5854929766146118183>‚ùå</emoji> <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{}</code>",

        "track_pause": "<b><emoji document_id=6334755820168808080>‚è∏Ô∏è</emoji> –¢—Ä–µ–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.</b>",
        "track_play": "<b><emoji document_id=5938473438468378529>üé∂</emoji> –ò–≥—Ä–∞—é...</b>",

        "track_loading": "<emoji document_id=5334768819548200731>üíª</emoji> <b>–ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫...</b>",

        "music_bio_disabled": "<b><emoji document_id=5188621441926438751>üéµ</emoji> –°—Ç—Ä–∏–º –º—É–∑—ã–∫–∏ –≤ –±–∏–æ –≤—ã–∫–ª—é—á–µ–Ω</b>",
        "music_bio_enabled": "<b><emoji document_id=5188621441926438751>üéµ</emoji> –°—Ç—Ä–∏–º –º—É–∑—ã–∫–∏ –≤ –±–∏–æ –≤–∫–ª—é—á–µ–Ω</b>",

        "track_skipped": "<b><emoji document_id=5188621441926438751>üéµ</emoji> –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫...</b>",

        "track_repeat": "<b><emoji document_id=6334550748365325938>üîÅ</emoji> –¢—Ä–µ–∫ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.</b>",
        "track_norepeat": "<b><emoji document_id=6334550748365325938>üîÅ</emoji> –¢—Ä–µ–∫ –Ω–µ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.</b>",

        "track_liked": f"<b><emoji document_id=5287454910059654880>‚ù§Ô∏è</emoji> –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!</b>",

        "channel_music_bio_disabled": "<b><emoji document_id=5188621441926438751>üéµ</emoji> –°—Ç—Ä–∏–º –º—É–∑—ã–∫–∏ –≤ –±–∏–æ –∫–∞–Ω–∞–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω!</b>",

        "channel_music_bio_enabled": """<b><emoji document_id=5188621441926438751>üéµ</emoji> –°—Ç—Ä–∏–º –º—É–∑—ã–∫–∏ –≤ –±–∏–æ –∫–∞–Ω–∞–ª–∞ –≤–∫–ª—é—á–µ–Ω!</b>
        
<b><emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –°–æ–∑–¥–∞–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª (–Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–µ)
2. –ü–æ—Å—Ç–∞–≤—å –∫–∞–Ω–∞–ª—É –∫—Ä–∞—Å–∏–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É —Å –ª–æ–≥–æ–º —Å–ø–æ—Ç–∏—Ñ–∞—è (–ø—Ä–∏–º–µ—Ä: https://github.com/fajox1/famods/blob/main/assets/photo_2025-03-26_17-03-56.jpg)
3. –î–æ–±–∞–≤—å –∫–∞–Ω–∞–ª –≤ –ø—Ä–æ—Ñ–∏–ª—å
4. –î–æ–±–∞–≤—å <code>@username</code> –∫–∞–Ω–∞–ª–∞ –≤ config (<code>.cfg Spotify4ik</code> ‚Üí <code>channel</code>)
5. –ì–æ—Ç–æ–≤–æ"""
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "client_id",
                None,
                lambda: "–ê–π–¥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ü–æ–ª—É—á–∏—Ç—å: https://developer.spotify.com/dashboard",
                validator=loader.validators.Hidden(loader.validators.String()),
            ),
            loader.ConfigValue(
                "client_secret",
                None,
                lambda: "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ü–æ–ª—É—á–∏—Ç—å: https://developer.spotify.com/dashboard",
                validator=loader.validators.Hidden(loader.validators.String()),
            ),
            loader.ConfigValue(
                "auth_token",
                None,
                lambda: "–¢–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                validator=loader.validators.Hidden(loader.validators.String()),
            ),
            loader.ConfigValue(
                "refresh_token",
                None,
                lambda: "–¢–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                validator=loader.validators.Hidden(loader.validators.String()),
            ),
            loader.ConfigValue(
                "bio_text",
                "üéµ {track_name} - {artist_name}",
                lambda: "–¢–µ–∫—Å—Ç –±–∏–æ —Å —Ç–µ–∫—É—â–∏–º —Ç—Ä–µ–∫–æ–º",
            ),
            loader.ConfigValue(
                "scopes",
                (
                    "user-read-playback-state playlist-read-private playlist-read-collaborative"
                    " app-remote-control user-modify-playback-state user-library-modify"
                    " user-library-read"
                ),
                lambda: "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π",
            ),
            loader.ConfigValue(
                "use_ytdl",
                False,
                lambda: "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–µ—Å–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å yt-dl",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "channel",
                None,
                lambda: "–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–π –º—É–∑—ã–∫–∏ –≤ –±–∏–æ"
            )
        )

    async def client_ready(self, client, db):
        self.db = db
        self._client = client

        self.musicdl = await self.import_lib(
            "https://libs.hikariatama.ru/musicdl.py",
            suspend_on_error=True,
        )

    @loader.command()
    async def spauth(self, message):
        """–í–æ–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç"""
        if not self.config['client_id'] or not self.config['client_secret']:
            return await utils.answer(message, self.strings['need_client_tokens'].format(self.get_prefix(), self.get_prefix()))

        sp_oauth = spotipy.oauth2.SpotifyOAuth(
            client_id=self.config['client_id'],
            client_secret=self.config['client_secret'],
            redirect_uri="https://sp.fajox.one",
            scope=self.config['scopes']
        )

        auth_url = sp_oauth.get_authorize_url()

        await utils.answer(message, self.strings['go_auth_link'].format(auth_url, self.get_prefix()))

    @loader.command()
    async def spcode(self, message):
        """–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self.config['client_id'] or not self.config['client_secret']:
            return await utils.answer(message, self.strings['need_client_tokens'].format(self.get_prefix()))
        code = utils.get_args_raw(message)
        if not code:
            return await utils.answer(message, self.strings['no_code'].format(self.get_prefix()))

        sp_oauth = spotipy.oauth2.SpotifyOAuth(
            client_id=self.config['client_id'],
            client_secret=self.config['client_secret'],
            redirect_uri="https://sp.fajox.one",
            scope=self.config['scopes']
        )
        token_info = sp_oauth.get_access_token(code)
        self.config['auth_token'] = token_info['access_token']
        self.config['refresh_token'] = token_info['refresh_token']

        try:
            sp = spotipy.Spotify(auth=token_info['access_token'])
            current_playback = sp.current_playback()
        except spotipy.oauth2.SpotifyOauthError as e:
            return await utils.answer(message, self.strings['auth_error'].format(str(e)))
        except Exception as e:
            return await utils.answer(message, self.strings['unexpected_error'].format(str(e)))

        await utils.answer(message, self.strings['code_installed'])

    @loader.command()
    async def spnow(self, message):
        """–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"""
        if not self.config['auth_token']:
            return await utils.answer(message, self.strings['no_auth_token'].format(self.get_prefix()))

        try:
            sp = spotipy.Spotify(auth=self.config['auth_token'])
            current_playback = sp.current_playback()

            if not current_playback or not current_playback.get('item'):
                return await utils.answer(message, self.strings['no_song_playing'])

            await utils.answer(message, self.strings['track_loading'])

            track = current_playback['item']
            track_name = track.get('name', 'Unknown Track')
            artist_name = track['artists'][0].get('name', 'Unknown Artist')
            album_name = track['album'].get('name', 'Unknown Album')
            duration_ms = track.get('duration_ms', 0)
            progress_ms = current_playback.get('progress_ms', 0)

            duration_min, duration_sec = divmod(duration_ms // 1000, 60)
            progress_min, progress_sec = divmod(progress_ms // 1000, 60)

            track_info = f"""
            üé∂ Track: {track_name} - {artist_name}
            üíø Album: {album_name}
            ‚è± Duration: {duration_min}m {duration_sec}s
            üéß Device: {current_playback['device']['name']}
            üîó [Open in Spotify]({track['external_urls']['spotify']})
            """
            await utils.answer(message, track_info)

        except Exception as e:
            return await utils.answer(message, self.strings['unexpected_error'].format(str(e)))

    @loader.command()
    async def spbiochannel(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∏–º —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ –≤ –±–∏–æ"""
        if not self.config['auth_token']:
            return await utils.answer(message, self.strings['no_auth_token'].format(self.get_prefix()))

        if self.db.get(self.name, "channel_bio_change", False):
            self.db.set(self.name, 'channel_bio_change', False)
            return await utils.answer(message, self.strings['channel_music_bio_disabled'])

        self.db.set(self.name, 'channel_bio_change', True)
        self._bio_task = asyncio.create_task(self._update_bio_channel())
        await utils.answer(message, self.strings['channel_music_bio_enabled'])

    async def _update_bio_channel(self):
        while True:
            if not self.db.get(self.name, "channel_bio_change", False):
                break
            sp = spotipy.Spotify(auth=self.config['auth_token'])
            try:
                current_playback = sp.current_playback()
                if current_playback and current_playback.get('item'):
                    track = current_playback['item']
                    track_name = track.get('name', 'Unknown Track')
                    artist_name = track['artists'][0].get('name', 'Unknown Artist')
                    album_name = track['album'].get('name', 'Unknown Album')
                    duration_ms = track.get('duration_ms', 0)
                    progress_ms = current_playback.get('progress_ms', 0)

                    track_info = (
                        f"üé∂ {track_name} - {artist_name}\n"
                        f"üíø Album: {album_name}\n"
                        f"‚è± Duration: {duration_ms // 60000}:{(duration_ms // 1000) % 60}\n"
                        f"üîó [Open on Spotify](https://open.spotify.com/track/{track['id']})"
                    )

                    channel = await self.client.get_entity(self.config['channel'])
                    try:
                        await self.client(
                            EditTitleRequest(
                                channel=channel,
                                title=track_info
                            )
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–æ –∫–∞–Ω–∞–ª–∞: {e}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–æ –∫–∞–Ω–∞–ª–∞: {e}")

            await asyncio.sleep(60)  # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    @loader.command()
    async def sptrackupdate(self, message):
        """–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫, –æ–±–Ω–æ–≤–ª—è—é—â–∏–π—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        if not self.config['auth_token']:
            return await utils.answer(message, self.strings['no_auth_token'].format(self.get_prefix()))

        sp = spotipy.Spotify(auth=self.config['auth_token'])
        
        # –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        update_flag = self.db.get(self.name, "track_update", False)
        
        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã, –æ—Ç–∫–ª—é—á–∞–µ–º
        if update_flag:
            self.db.set(self.name, "track_update", False)
            return await utils.answer(message, "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        
        # –í–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.db.set(self.name, "track_update", True)

        while self.db.get(self.name, "track_update", False):
            current_playback = sp.current_playback()

            if not current_playback or not current_playback.get('item'):
                return await utils.answer(message, self.strings['no_song_playing'])

            track = current_playback['item']
            track_name = track.get('name', 'Unknown Track')
            artist_name = track['artists'][0].get('name', 'Unknown Artist')
            album_name = track['album'].get('name', 'Unknown Album')
            duration_ms = track.get('duration_ms', 0)
            progress_ms = current_playback.get('progress_ms', 0)

            duration_min, duration_sec = divmod(duration_ms // 1000, 60)
            progress_min, progress_sec = divmod(progress_ms // 1000, 60)

            track_info = f"üé∂ {track_name} - {artist_name} üíø {album_name}"

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            channel = await self.client.get_entity(self.config['channel'])
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                msg = (await self.client.get_messages(channel, limit=1))[0]
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
                await msg.edit(track_info)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        return await utils.answer(message, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
