import google.generativeai as genai
import os
import time
import io
import json
import requests
from PIL import Image
from .. import loader, utils
import aiohttp


@loader.tds
class alexis_gemini(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Gemini AI –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    strings = {"name": "alexis_gemini"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("api_key", "", "API –∫–ª—é—á –¥–ª—è Gemini AI", validator=loader.validators.Hidden(loader.validators.String())),
            loader.ConfigValue("model_name", "gemini-1.5-flash", "–ú–æ–¥–µ–ª—å –¥–ª—è Gemini AI", validator=loader.validators.String()),
            loader.ConfigValue("system_instruction", "", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Gemini AI", validator=loader.validators.String()),
            loader.ConfigValue("proxy", "", "–ü—Ä–æ–∫—Å–∏", validator=loader.validators.String()),
            loader.ConfigValue("default_image_model", "flux", "–ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", validator=loader.validators.String()),
        )

    async def client_ready(self, client, db):
        self.client = client

    def _get_mime_type(self, message):
        if not message:
            return None

        try:
            if getattr(message, "video", None) or getattr(message, "video_note", None):
                return "video/mp4"
            elif getattr(message, "animation", None) or (getattr(message, "sticker", None) and getattr(message.sticker, "is_video", False)):
                return "video/mp4"
            elif getattr(message, "voice", None) or getattr(message, "audio", None):
                return "audio/wav"
            elif getattr(message, "photo", None):
                return "image/png"
            elif getattr(message, "sticker", None):
                return "image/webp"
        except AttributeError:
            return None

        return None

    async def generate_image(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Flux –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏"""
        start_time = time.time()

        payload = {
            "model": self.config["default_image_model"],
            "prompt": prompt,
            "response_format": "url"
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post("https://api.kshteam.top/v1/images/generate", headers={"Authorization": f"Bearer {self.config['api_key']}", "Content-Type": "application/json"}, json=payload) as response:
                    generation_time = round(time.time() - start_time, 2)
                    if response.status == 200:
                        data = await response.json()
                        image_url = data.get("data", [{}])[0].get("url", None)

                        if image_url:
                            return image_url, generation_time
                        else:
                            return None, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    else:
                        return None, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status}"
        except Exception as e:
            return None, f"–û—à–∏–±–∫–∞: {str(e)}"

    @loader.command()
    async def gimg(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Flux –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏"""
        prompt = utils.get_args_raw(message)
        if not prompt:
            await message.edit("<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω–∏–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å—Ç–∞—Ç—É—Å "‚åõÔ∏è –°–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É..."
        await message.edit(f"<emoji document_id=5386367538735104399>‚åõÔ∏è</emoji> –°–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url, generation_time = await self.generate_image(prompt)

        if image_url:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            async with aiohttp.ClientSession() as session:
                async with session.get(image_url) as img_response:
                    img_content = io.BytesIO(await img_response.read())
                    img_content.name = "generated_image.png"

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await utils.answer_file(message, img_content, caption=(
                        f"<blockquote><emoji document_id=5465143921912846619>üí≠</emoji> –ü—Ä–æ–º—Ç: <code>{prompt}</code></blockquote>\n"
                        f"<blockquote><emoji document_id=5199457120428249992>üïò</emoji> –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_time} —Å–µ–∫.</blockquote>\n"
                        f"<blockquote><emoji document_id=5877465816030515018>üòÄ</emoji> –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: <a href='{image_url}'>–°–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</a></blockquote>\n"
                        f"<blockquote><emoji document_id=5877260593903177342>‚öôÔ∏è</emoji> –ú–æ–¥–µ–ª—å: <code>{self.config['default_image_model']}</code></blockquote>"
                    ))
        else:
            await message.edit(f"<emoji document_id=5881702736843511327>‚ö†Ô∏è</emoji> –û—à–∏–±–∫–∞: {generation_time}") 

    @loader.command()
    async def geminicmd(self, message):
        """<reply to media/text> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini"""
        if not self.config["api_key"]:
            await message.edit("<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ aistudio.google.com/apikey")
            return

        prompt = utils.get_args_raw(message)
        media_path = None
        img = None
        show_question = True  # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç

        if message.is_reply:
            reply = await message.get_reply_message()
            mime_type = self._get_mime_type(reply)

            if mime_type:
                media_path = await reply.download_media()
                if not prompt:
                    prompt = "–û–ø–∏—à–∏ —ç—Ç–æ"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                    await message.edit("<emoji document_id=5386367538735104399>‚åõÔ∏è</emoji> –û–ø–∏—à–∏ —ç—Ç–æ...")
                    show_question = False  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "–í–æ–ø—Ä–æ—Å:", –µ—Å–ª–∏ –∑–∞–≥–ª—É—à–∫–∞
            else:
                prompt = prompt or reply.text

        if media_path and mime_type and mime_type.startswith("image"):
            try:
                img = Image.open(media_path)
            except Exception as e:
                await message.edit(f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                os.remove(media_path)
                return

        if not prompt and not img and not media_path:
            await message.edit("<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ, GIF, —Å—Ç–∏–∫–µ—Ä, –≥–æ–ª–æ—Å–æ–≤–æ–µ)")
            return

        await message.edit("<emoji document_id=5325547803936572038>‚ú®</emoji> –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...")

        try:
            genai.configure(api_key=self.config["api_key"])
            model = genai.GenerativeModel(
                model_name=self.config["model_name"],
                system_instruction=self.config["system_instruction"] or None,
            )

            content_parts = []
            if prompt:
                content_parts.append(genai.protos.Part(text=prompt))

            if media_path:
                with open(media_path, "rb") as f:
                    content_parts.append(genai.protos.Part(
                        inline_data=genai.protos.Blob(
                            mime_type=mime_type,
                            data=f.read()
                        )
                    ))

            if not content_parts:
                await message.edit("<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> –û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞.")
                return

            response = model.generate_content(content_parts)
            reply_text = response.text.strip() if response.text else "<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> –û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π."

            random_emojis = [
                "<emoji document_id=5440588507254896965>ü§®</emoji>",
                "<emoji document_id=5443135817998416433>üòï</emoji>",
                "<emoji document_id=5442828624757536533>üòÇ</emoji>",
                "<emoji document_id=5443072677684197457>üòò</emoji>",
                "<emoji document_id=5440854425860061667>üëπ</emoji>",
                "<emoji document_id=5443073472253148107>ü§ì</emoji>",
                "<emoji document_id=5440693467665677594>üö¨</emoji>",
                "<emoji document_id=5440883077586893345>‚òïÔ∏è</emoji>",
                "<emoji document_id=5442843472459481786>ü•≥</emoji>",
                "<emoji document_id=5442927761192665683>ü§≤</emoji>"
            ]
            from random import choice
            random_emoji = choice(random_emojis)

            if show_question and prompt != "–û–ø–∏—à–∏ —ç—Ç–æ":
                await message.edit(f"<emoji document_id=5443038326535759644>üí¨</emoji> –í–æ–ø—Ä–æ—Å: {prompt}\n<emoji document_id=5325547803936572038>‚ú®</emoji> –û—Ç–≤–µ—Ç –æ—Ç Gemini: {reply_text} {random_emoji}")
            else:
                await message.edit(f"<emoji document_id=5325547803936572038>‚ú®</emoji> –û—Ç–≤–µ—Ç –æ—Ç Gemini: {reply_text} {random_emoji}")
        except Exception as e:
            await message.edit(f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> –û—à–∏–±–∫–∞: {e}")
        finally:
            if media_path:
                os.remove(media_path)

    @loader.command()
    async def ghist(self, message):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 400 —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–∞"""
        if not self.config["api_key"]:
            await message.edit("<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ aistudio.google.com/apikey")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = None
        if message.is_reply:
            reply = await message.get_reply_message()
            user = reply.sender.username if reply.sender else None
            if user:
                await message.edit(f"<emoji document_id=5386367538735104399>‚åõÔ∏è</emoji> –°–æ–±–∏—Ä–∞—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user}...")
            else:
                await message.edit("<emoji document_id=5386367538735104399>‚åõÔ∏è</emoji> –°–æ–±–∏—Ä–∞—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π...")
        else:
            await message.edit("<emoji document_id=5386367538735104399>‚åõÔ∏è</emoji> –°–æ–±–∏—Ä–∞—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞...")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 400 —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_id = message.chat_id
        last_400_messages = []
        async for msg in self.client.iter_messages(chat_id, limit=400):
            if msg.text and (not user or msg.sender.username == user):
                last_400_messages.append(msg.text)

        # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ Gemini
        chat_text = "\n\n".join(last_400_messages)
        result = await self.analyze_chat_history(chat_text)

        # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await message.edit(result)

    async def analyze_chat_history(self, chat_text):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —á–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Gemini
            prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥—ã—Ç–æ–∂–∏, —á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞:\n\n{chat_text}"
            genai.configure(api_key=self.config["api_key"])
            model = genai.GenerativeModel(
                model_name=self.config["model_name"],
                system_instruction=self.config["system_instruction"] or None,
            )
            content_parts = [genai.protos.Part(text=prompt)]
            response = model.generate_content(content_parts)
            reply_text = response.text.strip() if response.text else "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞."

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = f"–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –æ–±—Å—É–∂–¥–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞?\n\n{reply_text}"

            return result

        except Exception as e:
            return f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> –û—à–∏–±–∫–∞: {str(e)}"
