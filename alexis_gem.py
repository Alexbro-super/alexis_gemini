import google.generativeai as genai
import os
from PIL import Image
from .. import loader, utils

@loader.tds
class alexis_gemini(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Gemini AI –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    strings = {"name": "alexis_gemini"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("api_key", "", "API –∫–ª—é—á –¥–ª—è Gemini AI", validator=loader.validators.Hidden(loader.validators.String())),
            loader.ConfigValue("model_name", "gemini-1.5-flash", "–ú–æ–¥–µ–ª—å –¥–ª—è Gemini AI", validator=loader.validators.String()),
            loader.ConfigValue("system_instruction", "", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Gemini AI", validator=loader.validators.String()),
            loader.ConfigValue("proxy", "", "–ü—Ä–æ–∫—Å–∏", validator=loader.validators.String()),
        )

    async def client_ready(self, client, db):
        self.client = client

    async def geminicmd(self, message):
        """<reply to media/text> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini"""
        if not self.config["api_key"]:
            await message.edit("‚ùó API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ aistudio.google.com/apikey")
            return

        prompt = utils.get_args_raw(message)
        if not prompt:
            await message.edit("‚ùó –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è Gemini AI.")
            return

        await message.edit("‚ú® –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...")

        try:
            genai.configure(api_key=self.config["api_key"])
            model = genai.GenerativeModel(self.config["model_name"])
            response = model.generate_content([genai.types.Content.Part(text=prompt)])
            reply_text = response.text.strip() if response.text else "‚ùó –û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π."
            await message.edit(f"üí¨ –í–æ–ø—Ä–æ—Å: {prompt}\n‚ú® –û—Ç–≤–µ—Ç –æ—Ç Gemini: {reply_text}")
        except Exception as e:
            await message.edit(f"‚ùó –û—à–∏–±–∫–∞: {e}")

    async def drawcmd(self, message):
        """<–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini"""
        if not self.config["api_key"]:
            await message.edit("‚ùó API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ aistudio.google.com/apikey")
            return

        prompt = utils.get_args_raw(message)
        if not prompt:
            await message.edit("‚ùó –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        await message.edit("üñå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

        try:
            genai.configure(api_key=self.config["api_key"])
            model = genai.GenerativeModel(self.config["model_name"])
            response = model.generate_content([genai.types.Content.Part(text=prompt)])
            
            if response and hasattr(response, 'images'):
                image_data = response.images[0]  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img_path = "generated_image.png"
                with open(img_path, "wb") as img_file:
                    img_file.write(image_data)

                await message.client.send_file(message.chat_id, img_path, caption=f"üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")
                os.remove(img_path)
                await message.delete()
                return
            
            await message.edit("‚ùó –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        except Exception as e:
            await message.edit(f"‚ùó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
