__version__ = (1, 0, 0, 2)

# This file is a part of Hikka Userbot
# Code is NOT licensed under CC-BY-NC-ND 4.0 unless otherwise specified.
# üåê https://github.com/hikariatama/Hikka

# You CAN edit this file without direct permission from the author.
# You can redistribute this file with any modifications.

# meta developer: @yg_modules
# scope: hikka_only
# scope: hikka_min 1.6.3

# requires: google-generativeai pillow

# ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ
# ‚ñå GEMINI AI MODULE ‚ñå
# ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ

import google.generativeai as genai
import os
from PIL import Image
from .. import loader, utils

@loader.tds
class yg_gemini(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Gemini AI"""

    strings = {"name": "yg_gemini"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "api_key",
                "",
                "API –∫–ª—é—á –¥–ª—è Gemini AI (aistudio.google.com/apikey)",
                validator=loader.validators.Hidden(loader.validators.String()),
            ),
            loader.ConfigValue(
                "model_name",
                "gemini-1.5-flash",
                "–ú–æ–¥–µ–ª—å –¥–ª—è Gemini AI. –ü—Ä–∏–º–µ—Ä—ã: gemini-1.5-flash, gemini-1.5-pro, gemini-2.0-flash-exp, gemini-2.0-flash-thinking-exp-1219",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "system_instruction",
                "",
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Gemini AI. –ü—Ä–∏–º–µ—Ä: –û–±—â–∞–π—Å—è –∫–∞–∫ –ø—Å–∏—Ö",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "proxy",
                "",
                "–ü—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ http://<user>:<pass>@<proxy>:<port>, –∏–ª–∏ http://<proxy>:<port>",
                validator=loader.validators.String(),
            ),
        )

    async def client_ready(self, client, db):
        self.client = client
        self.safety_settings = [
            {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
        ]

        proxy = self.config["proxy"]

        if proxy:
            os.environ["http_proxy"] = proxy
            os.environ["HTTP_PROXY"] = proxy
            os.environ["https_proxy"] = proxy
            os.environ["HTTPS_PROXY"] = proxy

    async def geminicmd(self, message):
        """<reply to photo/video/gif/text> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini"""
        if not self.config["api_key"]:
            await message.edit(f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Ç—É—Ç: aistudio.google.com/apikey (–±–µ—Å–ø–ª–∞—Ç–Ω–æ), –∑–∞—Ç–µ–º —É–∫–∞–∂–∏ –µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ (<code>{self.get_prefix()}cfg yg_gemini</code>)</b>")
            return

        prompt = utils.get_args_raw(message)
        media_path = None
        img = None

        if message.is_reply:
            reply = await message.get_reply_message()
            prompt = utils.get_args_raw(message) or reply.text

            try:
                if reply.media:
                    await message.edit("<b><emoji document_id=5386367538735104399>‚åõÔ∏è</emoji> –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞...</b>")
                    media_path = await reply.download_media()
            except AttributeError:
                pass

        if media_path:
            try:
                if media_path.endswith(('.jpg', '.jpeg', '.png')):
                    img = Image.open(media_path)
                else:
                    await message.edit("<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ/–≥–∏—Ñ...</b>")
            except Exception as e:
                await message.edit(f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {str(e)}")
                os.remove(media_path)
                return

        if not prompt and not img:
            await message.edit("<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <i>–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è Gemini AI –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–≤–∏–¥–µ–æ/–≥–∏—Ñ (–∏–ª–∏ –≤—Å–µ –≤–º–µ—Å—Ç–µ)</i>")
            return

        try:
            genai.configure(api_key=self.config["api_key"])
            system_instruction = self.config["system_instruction"] if self.config["system_instruction"] else None
            model = genai.GenerativeModel(
                model_name=self.config["model_name"],
                system_instruction=system_instruction,
                safety_settings=self.safety_settings,
            )

            if img and not prompt:
                response = model.generate_content(["", img], safety_settings=self.safety_settings)
            elif img and prompt:
                response = model.generate_content([prompt, img], safety_settings=self.safety_settings)
            elif media_path and not img:
                response = model.generate_content([f"Describe this video or GIF: {media_path}"], safety_settings=self.safety_settings)
            else:
                response = model.generate_content([prompt], safety_settings=self.safety_settings)

            reply = response.text.strip()

            if prompt:
                await message.edit(f"<emoji document_id=5443038326535759644>üí¨</emoji> <b>–í–æ–ø—Ä–æ—Å:</b> {prompt}\n\n"
                                   f"<emoji document_id=5325547803936572038>‚ú®</emoji> <b>–û—Ç–≤–µ—Ç –æ—Ç Gemini:</b> {reply}")
            else:
                await message.edit(f"<emoji document_id=5325547803936572038>‚ú®</emoji> <b>–û—Ç–≤–µ—Ç –æ—Ç Gemini (–ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é/–º–µ–¥–∏–∞):</b> {reply}")

        except Exception as e:
            await message.edit(f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>–û—à–∏–±–∫–∞:</b> {str(e)}")

        finally:
            if media_path:
                os.remove(media_path)