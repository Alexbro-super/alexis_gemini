import google.generativeai as genai
import os
from PIL import Image
from .. import loader, utils

@loader.tds
class alexis_gemini(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Gemini AI"""

    strings = {"name": "alexis_gemini"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("api_key", "", "API –∫–ª—é—á –¥–ª—è Gemini AI", validator=loader.validators.Hidden(loader.validators.String())),
            loader.ConfigValue("model_name", "gemini-1.5-flash", "–ú–æ–¥–µ–ª—å –¥–ª—è Gemini AI", validator=loader.validators.String()),
            loader.ConfigValue("system_instruction", "", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Gemini AI", validator=loader.validators.String()),
            loader.ConfigValue("proxy", "", "–ü—Ä–æ–∫—Å–∏", validator=loader.validators.String()),
        )

    async def client_ready(self, client, db):
        self.client = client

    def _get_mime_type(self, message):
        if not message:
            return None

        try:
            if getattr(message, "video", None) or getattr(message, "video_note", None):
                return "video/mp4"
            elif getattr(message, "animation", None) or (getattr(message, "sticker", None) and getattr(message.sticker, "is_video", False)):
                return "video/mp4"
            elif getattr(message, "voice", None) or getattr(message, "audio", None):
                return "audio/wav"
            elif getattr(message, "photo", None):
                return "image/png"
            elif getattr(message, "sticker", None):
                return "image/webp"
        except AttributeError:
            return None

        return None

    async def geminicmd(self, message):
        """<reply to media/text> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini"""
        if not self.config["api_key"]:
            await message.edit("<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Ç—É—Ç:</b> aistudio.google.com/apikey (–±–µ—Å–ø–ª–∞—Ç–Ω–æ), –∑–∞—Ç–µ–º —É–∫–∞–∂–∏ –µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            return

        prompt = utils.get_args_raw(message)
        media_path = None
        img = None
        show_question = True  # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç

        if message.is_reply:
            reply = await message.get_reply_message()
            mime_type = self._get_mime_type(reply)
            
            if mime_type:
                media_path = await reply.download_media()
                if not prompt:
                    prompt = "–û–ø–∏—à–∏ —ç—Ç–æ"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                    await message.edit("<emoji document_id=5386367538735104399>‚åõÔ∏è</emoji> <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ...</b>")
                    show_question = False  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "–í–æ–ø—Ä–æ—Å:", –µ—Å–ª–∏ –∑–∞–≥–ª—É—à–∫–∞
            else:
                prompt = prompt or reply.text

        if media_path and mime_type and mime_type.startswith("image"):
            try:
                img = Image.open(media_path)
            except Exception as e:
                await message.edit(f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {e}")
                os.remove(media_path)
                return

        if not prompt and not img and not media_path:
            await message.edit("<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <i>–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è Gemini AI –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ –≤—Å–µ –≤–º–µ—Å—Ç–µ)</i>")
            return

        await message.edit("<emoji document_id=5325547803936572038>‚ú®</emoji> <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...</b>")

        try:
            genai.configure(api_key=self.config["api_key"])
            model = genai.GenerativeModel(
                model_name=self.config["model_name"],
                system_instruction=self.config["system_instruction"] or None,
            )

            content_parts = []
            if prompt:
                content_parts.append(genai.protos.Part(text=prompt))

            if media_path:
                with open(media_path, "rb") as f:
                    content_parts.append(genai.protos.Part(
                        inline_data=genai.protos.Blob(
                            mime_type=mime_type,
                            data=f.read()
                        )
                    ))

            if not content_parts:
                await message.edit("<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>–û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞.</b>")
                return

            response = model.generate_content(content_parts)
            reply_text = response.text.strip() if response.text else "<emoji document_id=4988080790286894217>ü´•</emoji> <b>–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π.</b>"

            if show_question and prompt != "–û–ø–∏—à–∏ —ç—Ç–æ":
                await message.edit(f"<emoji document_id=5443038326535759644>üí¨</emoji> <b>–í–æ–ø—Ä–æ—Å:</b> {prompt}\n<emoji document_id=5325547803936572038>‚ú®</emoji> <b>–û—Ç–≤–µ—Ç –æ—Ç Gemini:</b> {reply_text}")
            else:
                await message.edit(f"<emoji document_id=5325547803936572038>‚ú®</emoji> <b>–û—Ç–≤–µ—Ç –æ—Ç Gemini:</b> {reply_text}")
        except Exception as e:
            await message.edit(f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>–û—à–∏–±–∫–∞:</b> {e}")
        finally:
            if media_path:
                os.remove(media_path)
