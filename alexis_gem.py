import google.generativeai as genai
import os
from PIL import Image

from .. import loader, utils

@loader.tds
class yg_gemini(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Gemini AI"""

    strings = {"name": "yg_gemini"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "api_key",
                "",
                "API –∫–ª—é—á –¥–ª—è Gemini AI (aistudio.google.com/apikey)",
                validator=loader.validators.Hidden(loader.validators.String()),
            ),
            loader.ConfigValue(
                "model_name",
                "gemini-1.5-flash",
                "–ú–æ–¥–µ–ª—å –¥–ª—è Gemini AI",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "system_instruction",
                "",
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Gemini AI",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "proxy",
                "",
                "–ü—Ä–æ–∫—Å–∏",
                validator=loader.validators.String(),
            ),
        )

    async def client_ready(self, client, db):
        self.client = client
        self.safety_settings = [
            {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
        ]

        proxy = self.config["proxy"]

        if proxy:
            os.environ["http_proxy"] = proxy
            os.environ["https_proxy"] = proxy

    def _get_mime_type(self, message):
        if not message:
            return None

        try:
            if getattr(message, "video", None) or getattr(message, "video_note", None):
                return "video/mp4"
            elif getattr(message, "animation", None) or (getattr(message, "sticker", None) and getattr(message.sticker, "is_video", False)):
                return "video/mp4"
            elif getattr(message, "voice", None) or getattr(message, "audio", None):
                return "audio/wav"
            elif getattr(message, "photo", None) or getattr(message, "sticker", None):
                return "image/png"
        except AttributeError:
            return None

        return None

    async def geminicmd(self, message):
        """<reply to media/text> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini"""
        if not self.config["api_key"]:
            await message.edit("‚ùó API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ aistudio.google.com/apikey")
            return

        prompt = utils.get_args_raw(message)
        media_path = None
        img = None

        if message.is_reply:
            reply = await message.get_reply_message()
            prompt = utils.get_args_raw(message) or (getattr(reply, "text", "") if reply else "")

            try:
                if getattr(reply, "photo", None):
                    await message.edit("<b><emoji document_id=5386367538735104399>‚åõÔ∏è</emoji> –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ...</b>")
                    media_path = await reply.download_media()
            except AttributeError:
                pass

        if not prompt:
            prompt = "–û–ø–∏—à–∏ —ç—Ç–æ."  # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞

        if media_path:
            try:
                img = Image.open(media_path)
            except Exception as e:
                await message.edit(f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {str(e)}")
                os.remove(media_path)
                return

        await message.edit("‚ú® –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...")

        try:
            genai.configure(api_key=self.config["api_key"])
            model = genai.GenerativeModel(
                model_name=self.config["model_name"],
                system_instruction=self.config["system_instruction"] or None,
                safety_settings=self.safety_settings,
            )

            content_parts = []
            if prompt:
                content_parts.append(genai.protos.Part(text=prompt))

            if media_path:
                with open(media_path, "rb") as f:
                    content_parts.append(genai.protos.Part(
                        inline_data=genai.protos.Blob(
                            mime_type="image/png",
                            data=f.read()
                        )
                    ))

            if not content_parts:
                await message.edit("‚ùó –û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞.")
                return

            response = model.generate_content(content_parts, safety_settings=self.safety_settings)
            reply_text = response.text.strip() if response.text else "‚ùó –û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π."

            await message.edit(f"üí¨ –í–æ–ø—Ä–æ—Å: {prompt}\n‚ú® –û—Ç–≤–µ—Ç –æ—Ç Gemini: {reply_text}")
        except Exception as e:
            await message.edit(f"‚ùó –û—à–∏–±–∫–∞: {e}")
        finally:
            if media_path:
                os.remove(media_path)
