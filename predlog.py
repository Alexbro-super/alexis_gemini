from telethon import events
from .. import loader
from telebot import TeleBot, types
import asyncio

@loader.tds
class PredlogBotMod(loader.Module):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö –≤ –∫–∞–Ω–∞–ª"""
    strings = {"name": "PredlogBot"}

    def __init__(self):
        self.token = "8066132918:AAGAFa_GzT5UKXki03kV7z7XFDmXyxVmfLY"
        self.channel_id = -1002630066044  # –ö–∞–Ω–∞–ª/—á–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        self.bot = TeleBot(self.token, parse_mode="HTML")
        self.waiting_for_text = {}

    async def client_ready(self, client, db):
        self.client = client

        @self.bot.message_handler(commands=["start"])
        def send_welcome(message):
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="send_offer"))
            self.bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ üëá", reply_markup=kb)

        @self.bot.callback_query_handler(func=lambda call: call.data == "send_offer")
        def ask_for_text(call):
            self.bot.send_message(call.message.chat.id, "‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ.")
            self.waiting_for_text[call.message.chat.id] = True

        @self.bot.message_handler(content_types=["text", "photo", "document"])
        def forward_offer(message):
            if not self.waiting_for_text.get(message.chat.id):
                return

            self.waiting_for_text[message.chat.id] = False

            caption = message.caption or message.text or "üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏–µ"
            try:
                if message.content_type == "photo":
                    file_id = message.photo[-1].file_id
                    self.bot.send_photo(self.channel_id, file_id, caption=caption)
                elif message.content_type == "document":
                    self.bot.send_document(self.channel_id, message.document.file_id, caption=caption)
                else:
                    self.bot.send_message(self.channel_id, caption)
                self.bot.send_message(message.chat.id, "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

        loop = asyncio.get_event_loop()
        loop.run_in_executor(None, self.bot.infinity_polling)
